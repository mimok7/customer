'use client';
import React, { useState, useEffect, Suspense } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import PageWrapper from '../../../components/PageWrapper';
import SectionBox from '../../../components/SectionBox';
import Link from 'next/link';
import supabase from '@/lib/supabase';
import logger from '../../../lib/logger';

function DirectBookingContent() {
    const router = useRouter();
    const searchParams = useSearchParams();
    const completedService = searchParams.get('completed');

    const [user, setUser] = useState<any>(null);
    const [userProfile, setUserProfile] = useState<any>(null);
    const [completedServices, setCompletedServices] = useState<string[]>([]);
    const [showCompletionMessage, setShowCompletionMessage] = useState(false);
    const [activeQuoteId, setActiveQuoteId] = useState<string | null>(null);
    const [activeQuoteData, setActiveQuoteData] = useState<any>(null); // Í≤¨Ï†Å Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
    const [isFirstBooking, setIsFirstBooking] = useState(false);
    const [canCreateNewBooking, setCanCreateNewBooking] = useState(false);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [isInitialized, setIsInitialized] = useState(false);

    useEffect(() => {
        const initializePage = async () => {
            if (isInitialized) return; // Ïù¥ÎØ∏ Ï¥àÍ∏∞ÌôîÎêú Í≤ΩÏö∞ Ïã§ÌñâÌïòÏßÄ ÏïäÏùå

            setIsLoading(true);
            setError(null);
            try {
                logger.info('üöÄ ÌéòÏù¥ÏßÄ Ï¥àÍ∏∞Ìôî ÏãúÏûë...');
                // ÏÇ¨Ïö©Ïûê/ÌîÑÎ°úÌïÑÍ≥º ÏôÑÎ£åÎêú ÏÑúÎπÑÏä§ Ï°∞ÌöåÎ•º Î≥ëÎ†¨ Ïã§ÌñâÌïòÏó¨ Ï¥àÍ∏∞ Î°úÎìú ÏãúÍ∞Ñ Îã®Ï∂ï
                await Promise.all([loadUserInfo(), loadCompletedServices()]);
                setIsInitialized(true);
            } catch (err) {
                logger.error('‚ùå ÌéòÏù¥ÏßÄ Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', err);
                setError('ÌéòÏù¥ÏßÄÎ•º Î°úÎìúÌïòÎäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
            } finally {
                setIsLoading(false);
            }
        };

        initializePage();

        // ÏôÑÎ£å Î©îÏãúÏßÄ ÌëúÏãú
        if (completedService) {
            setShowCompletionMessage(true);
            setTimeout(() => setShowCompletionMessage(false), 5000);
        }
    }, [completedService]);

    // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Í∞Ä Î°úÎìúÎêú ÌõÑ Í≤¨Ï†Å ÏÉÅÌÉú ÌôïÏù∏
    useEffect(() => {
        if (isInitialized && user && userProfile) {
            logger.info('üë§ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï§ÄÎπÑ ÏôÑÎ£å - Í≤¨Ï†Å ÏÉÅÌÉú ÌôïÏù∏ ÏãúÏûë');
            checkBookingStatusAndAutoCreate();
        }
    }, [isInitialized, user, userProfile]);

    const loadUserInfo = async () => {
        try {
            logger.debug('üë§ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Î°úÎìú ÏãúÏûë...');
            const { data: { user }, error: userError } = await supabase.auth.getUser();
            if (userError || !user) {
                logger.error('‚ùå ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù Ïã§Ìå®:', userError);
                router.push('/login');
                return;
            }
            logger.debug('‚úÖ Ïù∏Ï¶ùÎêú ÏÇ¨Ïö©Ïûê:', user.email);
            setUser(user);

            // ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥ Ï°∞Ìöå
            const { data: profile, error: profileError } = await supabase
                .from('users')
                .select('name, email')
                .eq('id', user.id)
                .single();

            if (profileError) {
                logger.warn('‚ùå ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Ï°∞Ìöå Ïã§Ìå®:', profileError);
                // ÌîÑÎ°úÌïÑÏù¥ ÏóÜÏñ¥ÎèÑ Í≥ÑÏÜç ÏßÑÌñâ
                setUserProfile({ name: null, email: user.email });
            } else {
                logger.debug('‚úÖ ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ:', profile);
                setUserProfile(profile);
            }
        } catch (error) {
            logger.error('‚ùå ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Î°úÎìú Ïã§Ìå®:', error);
        }
    };

    const loadCompletedServices = async () => {
        try {
            const { data: { user }, error: userError } = await supabase.auth.getUser();
            if (userError || !user) return;

            // ÏÇ¨Ïö©ÏûêÏùò ÏòàÏïΩ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
            const { data: reservations } = await supabase
                .from('reservation')
                .select('re_type')
                .eq('re_user_id', user.id);

            if (reservations) {
                const completedTypes = reservations.map(r => r.re_type);
                setCompletedServices(completedTypes);
            }
        } catch (error) {
            logger.error('ÏôÑÎ£åÎêú ÏÑúÎπÑÏä§ Î°úÎìú Ïã§Ìå®:', error);
        }
    };

    // ÏòàÏïΩ ÏÉÅÌÉú ÌôïÏù∏ Î∞è ÏûêÎèô Í≤¨Ï†Å ÏÉùÏÑ± Ìï®Ïàò
    const checkBookingStatusAndAutoCreate = async () => {
        try {
            const { data: { user }, error: userError } = await supabase.auth.getUser();
            if (userError || !user) {
                logger.error('‚ùå ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù Ïã§Ìå®:', userError);
                return;
            }

            logger.debug('üìã Í∏∞Ï°¥ Í≤¨Ï†Å Ï°∞Ìöå ÏãúÏûë...');
            // ÏÇ¨Ïö©ÏûêÏùò Í∏∞Ï°¥ Í≤¨Ï†Å Ï°∞Ìöå (draft ÏÉÅÌÉú) - quote_id Ïª¨Îüº Ï†úÍ±∞
            const { data: quotes, error: quotesError } = await supabase
                .from('quote')
                .select('id, title, status, created_at')
                .eq('user_id', user.id)
                .eq('status', 'draft')
                .order('created_at', { ascending: false })
                .limit(1);

            if (quotesError) {
                logger.error('‚ùå Í≤¨Ï†Å Ï°∞Ìöå Ïã§Ìå®:', quotesError);
                logger.debug('ÏóêÎü¨ ÏÉÅÏÑ∏:', JSON.stringify(quotesError, null, 2));
                return;
            }

            logger.debug('‚úÖ Í≤¨Ï†Å Ï°∞Ìöå ÏÑ±Í≥µ:', quotes);

            // ÏÇ¨Ïö©Ïûê Í∂åÌïú ÌôïÏù∏ (Îß§ÎãàÏ†ÄÏù∏ÏßÄ Ï≤¥ÌÅ¨)
            const { data: userRole } = await supabase
                .from('users')
                .select('role')
                .eq('id', user.id)
                .single();

            const isManager = userRole?.role === 'manager' || userRole?.role === 'admin';
            setCanCreateNewBooking(true); // Î™®Îì† ÏÇ¨Ïö©ÏûêÍ∞Ä Í≤¨Ï†Å ÏÉùÏÑ± Í∞ÄÎä•

            if (quotes && quotes.length > 0) {
                // Í∏∞Ï°¥ Í≤¨Ï†ÅÏù¥ ÏûàÎäî Í≤ΩÏö∞
                logger.info('üìã Í∏∞Ï°¥ Í≤¨Ï†Å ÏÇ¨Ïö©');
                setActiveQuoteId(quotes[0].id); // idÎ•º ÏÇ¨Ïö©
                setActiveQuoteData(quotes[0]); // Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
                setIsFirstBooking(false);
            } else {
                // Í∏∞Ï°¥ Í≤¨Ï†ÅÏù¥ ÏóÜÎäî Í≤ΩÏö∞ ÏûêÎèôÏúºÎ°ú Í≤¨Ï†Å ÏÉùÏÑ±
                logger.info('üîÑ ÏÉà Í≤¨Ï†Å ÏûêÎèô ÏÉùÏÑ± ÏãúÏûë...');
                await createNewBookingAuto();
            }
        } catch (error) {
            logger.error('‚ùå ÏòàÏïΩ ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®:', error);
        }
    };

    // ÏûêÎèô Í≤¨Ï†Å ÏÉùÏÑ± Ìï®Ïàò (ÏïåÎ¶º ÏóÜÏùå)
    const createNewBookingAuto = async () => {
        if (!user || !userProfile) {
            logger.warn('‚ùå ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Î∂ÄÏ°± - ÏûêÎèô ÏÉùÏÑ± Ï∑®ÏÜå');
            return;
        }

        try {
            logger.info('üéØ ÏûêÎèô Í≤¨Ï†Å ÏÉùÏÑ± ÏãúÏûë...');
            // Í≤¨Ï†Å ÌÉÄÏù¥ÌãÄ ÏÉùÏÑ±
            const userName = getUserDisplayName();
            logger.debug('üë§ ÏÇ¨Ïö©ÏûêÎ™Ö:', userName);

            const { data: existingQuotes, error: countError } = await supabase
                .from('quote')
                .select('id')
                .eq('user_id', user.id)
                .order('created_at', { ascending: false });

            if (countError) {
                logger.error('‚ùå Í∏∞Ï°¥ Í≤¨Ï†Å Í∞úÏàò Ï°∞Ìöå Ïã§Ìå®:', countError);
                return;
            }

            const quoteNumber = (existingQuotes?.length || 0) + 1;
            const quoteTitle = `${userName}${quoteNumber}`;

            logger.debug('üìù ÏÉùÏÑ±Ìï† Í≤¨Ï†Å Ï†ïÎ≥¥:', { quoteTitle });

            const insertData = {
                user_id: user.id,
                title: quoteTitle,
                status: 'draft'
            };

            logger.debug('üíæ ÏÇΩÏûÖÌï† Îç∞Ïù¥ÌÑ∞:', insertData);

            const { data: quoteData, error: quoteError } = await supabase
                .from('quote')
                .insert(insertData)
                .select()
                .single();

            if (quoteError) {
                logger.error('‚ùå ÏûêÎèô Í≤¨Ï†Å ÏÉùÏÑ± Ïò§Î•ò:', quoteError);
                logger.debug('ÏóêÎü¨ ÏÉÅÏÑ∏:', JSON.stringify(quoteError, null, 2));
                return;
            }

            logger.info('‚úÖ ÏûêÎèô Í≤¨Ï†Å ÏÉùÏÑ± ÏÑ±Í≥µ');
            setActiveQuoteId(quoteData.id); // id ÏÇ¨Ïö©
            setActiveQuoteData(quoteData); // Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
            setIsFirstBooking(false);
        } catch (error) {
            logger.error('‚ùå ÏûêÎèô Í≤¨Ï†Å ÏÉùÏÑ± ÏòàÏô∏:', error);
        }
    };

    const getUserDisplayName = () => {
        if (userProfile?.name) return userProfile.name;
        if (user?.email) {
            return user.email.split('@')[0];
        }
        return 'Í≥†Í∞ù';
    };

    const getServiceDisplayName = (serviceType: string) => {
        const names: { [key: string]: string } = {
            cruise: 'ÌÅ¨Î£®Ï¶à',
            airport: 'Í≥µÌï≠ ÏÑúÎπÑÏä§',
            hotel: 'Ìò∏ÌÖî',
            rentcar: 'Î†åÌÑ∞Ïπ¥',
            tour: 'Ìà¨Ïñ¥',
            vehicle: 'Ï∞®Îüâ ÏÑúÎπÑÏä§'
        };
        return names[serviceType] || serviceType;
    };

    // ÏÉà ÏòàÏïΩ ÏÉùÏÑ± Ìï®Ïàò
    const createNewBooking = async () => {
        if (!user) return;

        try {
            // Í≤¨Ï†Å ÌÉÄÏù¥ÌãÄ ÏÉùÏÑ±
            const userName = getUserDisplayName();
            const { data: existingQuotes } = await supabase
                .from('quote')
                .select('id')
                .eq('user_id', user.id)
                .order('created_at', { ascending: false });

            const quoteNumber = (existingQuotes?.length || 0) + 1;
            const quoteTitle = `${userName}${quoteNumber}`;

            const { data: quoteData, error: quoteError } = await supabase
                .from('quote')
                .insert({
                    user_id: user.id,
                    title: quoteTitle,
                    status: 'draft'
                })
                .select()
                .single();

            if (quoteError) {
                logger.error('Í≤¨Ï†Å ÏÉùÏÑ± Ïò§Î•ò:', quoteError);
                alert('Í≤¨Ï†Å ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
                return;
            }

            setActiveQuoteId(quoteData.id); // id ÏÇ¨Ïö©
            setActiveQuoteData(quoteData); // Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
            setIsFirstBooking(false);
            alert(`ÏÉà ÏòàÏïΩ "${quoteTitle}"Ïù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.`);

            // ÏÉÅÌÉú ÏÉàÎ°úÍ≥†Ïπ®
            checkBookingStatusAndAutoCreate();
        } catch (error) {
            logger.error('ÏÉà ÏòàÏïΩ ÏÉùÏÑ± Ïò§Î•ò:', error);
            alert('ÏÉà ÏòàÏïΩ ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
        }
    };

    // ÏÑúÎπÑÏä§ ÎßÅÌÅ¨ ÏÉùÏÑ± Ìï®Ïàò
    const getServiceHref = (service: any) => {
        // Î™®Îì† ÏÑúÎπÑÏä§Îäî Ìï≠ÏÉÅ Ï†ëÍ∑º Í∞ÄÎä• (Í≤¨Ï†Å IDÍ∞Ä ÏûàÏúºÎ©¥ Ï†ÑÎã¨, ÏóÜÏúºÎ©¥ ÏÉàÎ°ú ÏÉùÏÑ±)
        const baseHref = service.href;
        const quoteParam = activeQuoteId ? `?quoteId=${activeQuoteId}` : '';
        return `${baseHref}${quoteParam}`;
    };

    // ÏÑúÎπÑÏä§ Ï†ëÍ∑º Í∞ÄÎä• Ïó¨Î∂Ä ÌôïÏù∏
    const isServiceAccessible = () => {
        // ÏÑúÎπÑÏä§Îäî Ìï≠ÏÉÅ Ï†ëÍ∑º Í∞ÄÎä• (Í≤¨Ï†Å ID ÏÉùÏÑ±Í≥º Î¨¥Í¥Ä)
        return true;
    };

    const services = [
        {
            icon: 'üö¢',
            label: 'ÌÅ¨Î£®Ï¶à ÏòàÏïΩ',
            href: '/mypage/direct-booking/cruise',
            description: 'ÌÅ¨Î£®Ï¶à Ïó¨Ìñâ Í∞ùÏã§ Î∞è Ï∞®Îüâ ÏßÅÏ†ë ÏòàÏïΩ',
            color: 'from-blue-500 to-cyan-500',
            type: 'cruise'
        },
        {
            icon: '‚úàÔ∏è',
            label: 'Í≥µÌï≠ ÏÑúÎπÑÏä§',
            href: '/mypage/direct-booking/airport/1',
            description: 'Í≥µÌï≠ ÌîΩÏóÖ/ÏÉåÎî© ÏÑúÎπÑÏä§ ÏßÅÏ†ë ÏòàÏïΩ',
            color: 'from-sky-500 to-blue-500',
            type: 'airport'
        },
        {
            icon: 'üè®',
            label: 'Ìò∏ÌÖî ÏòàÏïΩ',
            href: '/mypage/direct-booking/hotel',
            description: 'Ìò∏ÌÖî ÏàôÎ∞ï ÏÑúÎπÑÏä§ ÏßÅÏ†ë ÏòàÏïΩ',
            color: 'from-purple-500 to-pink-500',
            type: 'hotel'
        },
        {
            icon: 'üöó',
            label: 'Î†åÌÑ∞Ïπ¥ ÏòàÏïΩ',
            href: '/mypage/direct-booking/rentcar/1',
            description: 'Î†åÌÑ∞Ïπ¥ ÏÑúÎπÑÏä§ ÏßÅÏ†ë ÏòàÏïΩ',
            color: 'from-green-500 to-emerald-500',
            type: 'rentcar'
        },
        {
            icon: 'üó∫Ô∏è',
            label: 'Ìà¨Ïñ¥ ÏòàÏïΩ',
            href: '/mypage/direct-booking/tour/1',
            description: 'Í¥ÄÍ¥ë Ìà¨Ïñ¥ ÏÑúÎπÑÏä§ ÏßÅÏ†ë ÏòàÏïΩ',
            color: 'from-orange-500 to-red-500',
            type: 'tour'
        }
    ];

    return (
        <PageWrapper title={`üéØ ${getUserDisplayName()}Îãò, Î∞îÎ°ú ÏòàÏïΩÌïòÍ∏∞`}>
            {/* Î°úÎî© ÏÉÅÌÉú */}
            {isLoading && (
                <div className="flex justify-center items-center h-64">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
                    <p className="ml-4 text-gray-600">ÌéòÏù¥ÏßÄÎ•º Î°úÎìúÌïòÎäî Ï§ë...</p>
                </div>
            )}

            {/* ÏóêÎü¨ ÏÉÅÌÉú */}
            {error && (
                <div className="mb-6 p-4 bg-red-100 border border-red-300 rounded-lg">
                    <div className="flex items-center">
                        <span className="text-red-600 text-xl mr-2">‚ö†Ô∏è</span>
                        <div>
                            <h3 className="text-red-800 font-semibold">Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§</h3>
                            <p className="text-red-700 text-sm mt-1">{error}</p>
                            <button
                                onClick={() => window.location.reload()}
                                className="mt-2 px-3 py-1 bg-red-500 text-white text-sm rounded hover:bg-red-600"
                            >
                                ÌéòÏù¥ÏßÄ ÏÉàÎ°úÍ≥†Ïπ®
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {/* Ï†ïÏÉÅ Î°úÎìúÎêú Í≤ΩÏö∞Îßå ÎÇ¥Ïö© ÌëúÏãú */}
            {!isLoading && !error && (
                <>
                    {/* ÏôÑÎ£å Î©îÏãúÏßÄ */}
                    {showCompletionMessage && completedService && (
                        <div className="mb-6 p-4 bg-green-100 border border-green-300 rounded-lg animate-pulse">
                            <div className="flex items-center">
                                <span className="text-green-600 text-xl mr-2">üéâ</span>
                                <div>
                                    <h3 className="text-green-800 font-semibold">
                                        {getServiceDisplayName(completedService)} ÏòàÏïΩÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!
                                    </h3>
                                    <p className="text-green-700 text-sm mt-1">
                                        ÏòàÏïΩ ÎÇ¥Ïö©ÏùÄ ÎßàÏù¥ÌéòÏù¥ÏßÄ ‚Üí ÏòàÏïΩ Í¥ÄÎ¶¨ÏóêÏÑú ÌôïÏù∏ÌïòÏã§ Ïàò ÏûàÏäµÎãàÎã§.
                                    </p>
                                </div>
                            </div>
                        </div>
                    )}

                    {/* ÏïàÎÇ¥ Ïπ¥Îìú */}
                    <div className="bg-gradient-to-r from-blue-600 to-purple-600 rounded-xl p-6 mb-8 text-white">
                        <h2 className="text-2xl font-bold mb-2">‚ö° Îπ†Î•∏ ÏòàÏïΩ ÏÑúÎπÑÏä§</h2>
                        <p className="text-blue-100 mb-4">
                            ÏõêÌïòÎäî ÏÑúÎπÑÏä§Î•º ÏÑ†ÌÉùÌïòÏó¨ Ï†ïÎ≥¥Î•º ÏûÖÎ†•ÌïòÏãúÎ©¥ Ï¶âÏãú ÏòàÏïΩÏù¥ ÏôÑÎ£åÎê©ÎãàÎã§.
                        </p>
                        <div className="bg-white/20 rounded-lg p-3">
                            <p className="text-sm font-medium">‚ú® Ïû•Ï†ê</p>
                            <ul className="text-sm text-blue-100 mt-1 space-y-1">
                                <li>‚Ä¢ Îπ†Î•∏ ÏòàÏïΩ Ï≤òÎ¶¨ (Í≤¨Ï†Å ÎåÄÍ∏∞ ÏãúÍ∞Ñ ÏóÜÏùå)</li>
                                <li>‚Ä¢ Ïã§ÏãúÍ∞Ñ Í∞ÄÍ≤© ÌôïÏù∏ Î∞è ÏòàÏïΩ ÌôïÏ†ï</li>
                                <li>‚Ä¢ ÌÜµÌï©Îêú ÏòàÏïΩ Ï†ïÎ≥¥ Í¥ÄÎ¶¨</li>
                            </ul>
                        </div>
                    </div>

                    {/* ÌòÑÏû¨ ÏßÑÌñâ Ï§ëÏù∏ Í≤¨Ï†Å Ï†ïÎ≥¥ */}
                    {activeQuoteData && (
                        <div className="mb-6 bg-blue-50 border border-blue-200 rounded-lg p-4">
                            <div className="flex items-center justify-between">
                                <div className="flex items-center">
                                    <span className="text-blue-600 text-xl mr-2">üìã</span>
                                    <div>
                                        <h3 className="text-blue-800 font-semibold">
                                            ÏßÑÌñâ Ï§ëÏù∏ Í≤¨Ï†Å: {activeQuoteData.title}
                                        </h3>
                                        <p className="text-blue-700 text-sm mt-1">
                                            ÏÉùÏÑ±Ïùº: {new Date(activeQuoteData.created_at).toLocaleDateString('ko-KR')} | ID: {activeQuoteData.id}
                                        </p>
                                        <p className="text-blue-600 text-xs mt-1">
                                            Ïù¥ Í≤¨Ï†ÅÏóê ÏÑúÎπÑÏä§Î•º Ï∂îÍ∞ÄÌïòÍ±∞ÎÇò ÏàòÏ†ïÌï† Ïàò ÏûàÏäµÎãàÎã§.
                                        </p>
                                    </div>
                                </div>

                            </div>
                        </div>
                    )}

                    {/* Í≤¨Ï†ÅÏù¥ ÏóÜÏùÑ Îïå ÏïàÎÇ¥ */}
                    {!activeQuoteData && (
                        <div className="mb-6 bg-blue-50 border border-blue-200 rounded-lg p-4">
                            <div className="flex items-center justify-between">
                                <div className="flex items-center">
                                    <span className="text-blue-600 text-xl mr-2">‚è≥</span>
                                    <div>
                                        <h3 className="text-blue-800 font-semibold">
                                            Í≤¨Ï†ÅÏùÑ ÏÉùÏÑ±ÌïòÎäî Ï§ëÏûÖÎãàÎã§...
                                        </h3>
                                        <p className="text-blue-700 text-sm mt-1">
                                            Ïû†ÏãúÎßå Í∏∞Îã§Î†§ Ï£ºÏÑ∏Ïöî. ÏûêÎèôÏúºÎ°ú ÏÉà Í≤¨Ï†ÅÏù¥ ÏÉùÏÑ±Îê©ÎãàÎã§.
                                        </p>
                                    </div>
                                </div>
                                <button
                                    onClick={createNewBooking}
                                    className="bg-blue-500 text-white px-3 py-1 rounded text-sm hover:bg-blue-600 whitespace-nowrap"
                                >
                                    ÏàòÎèô ÏÉùÏÑ±
                                </button>
                            </div>
                        </div>
                    )}

                    <SectionBox title="ÏòàÏïΩÌï† ÏÑúÎπÑÏä§Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî">
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                            {services.map((service, index) => {
                                const isCompleted = completedServices.includes(service.type);
                                const href = getServiceHref(service);
                                const isAccessible = isServiceAccessible();

                                const ServiceCard = ({ children }: { children: React.ReactNode }) => {
                                    // Í≤¨Ï†ÅÏù¥ ÏûàÏùÑ ÎïåÎßå ÏÑúÎπÑÏä§ Ï†ëÍ∑º Í∞ÄÎä•
                                    if (activeQuoteData) {
                                        return <Link href={href} className="group">{children}</Link>;
                                    } else {
                                        return <div className="cursor-not-allowed">{children}</div>;
                                    }
                                };

                                return (
                                    <ServiceCard key={index}>
                                        <div className={`relative overflow-hidden bg-white border border-gray-200 rounded-xl shadow-lg transform transition-all duration-300 ease-out ${activeQuoteData
                                            ? 'hover:shadow-xl hover:-translate-y-2 cursor-pointer'
                                            : 'opacity-50 cursor-not-allowed'
                                            }`}>
                                            <div className={`absolute inset-0 bg-gradient-to-br from-blue-500 to-cyan-500 opacity-0 transition-opacity duration-300 ${activeQuoteData ? 'group-hover:opacity-5' : ''
                                                }`}></div>

                                            {/* ÏôÑÎ£å Î∞∞ÏßÄ */}
                                            {isCompleted && (
                                                <div className="absolute top-2 right-2 bg-green-500 text-white text-xs px-2 py-1 rounded-full font-semibold z-10 flex items-center gap-1">
                                                    <span>‚úÖ</span>
                                                    <span>ÏôÑÎ£å</span>
                                                </div>
                                            )}

                                            <div className="relative p-6">
                                                <div className="flex items-center mb-4">
                                                    <div className={`text-4xl mr-4 transform transition-transform duration-300 ${activeQuoteData ? 'group-hover:scale-110' : ''
                                                        }`}>
                                                        {service.icon}
                                                    </div>
                                                    <div>
                                                        <h3 className={`text-lg font-bold transition-colors duration-300 ${activeQuoteData
                                                            ? 'text-gray-800 group-hover:text-blue-700'
                                                            : 'text-gray-500'
                                                            }`}>
                                                            {service.label}
                                                        </h3>
                                                        <p className={`text-sm mt-1 ${activeQuoteData ? 'text-gray-600' : 'text-gray-400'
                                                            }`}>
                                                            {service.description}
                                                        </p>
                                                    </div>
                                                </div>

                                                <div className="flex items-center justify-between">
                                                    <span className={`text-sm font-medium ${activeQuoteData
                                                        ? isCompleted ? 'text-green-600' : 'text-blue-600'
                                                        : 'text-gray-400'
                                                        }`}>
                                                        {activeQuoteData
                                                            ? isCompleted
                                                                ? 'ÏàòÏ†ïÌïòÍ∏∞ ‚Üí'
                                                                : 'Í≤¨Ï†ÅÏóê Ï∂îÍ∞Ä ‚Üí'
                                                            : 'Í≤¨Ï†ÅÏùÑ Î®ºÏ†Ä ÏÉùÏÑ±ÌïòÏÑ∏Ïöî'
                                                        }
                                                    </span>
                                                    <div className={`w-8 h-8 rounded-full flex items-center justify-center transition-colors duration-300 ${activeQuoteData
                                                        ? isCompleted
                                                            ? 'bg-green-100 group-hover:bg-green-200'
                                                            : 'bg-blue-100 group-hover:bg-blue-200'
                                                        : 'bg-gray-100'
                                                        }`}>
                                                        <span className={`text-sm ${activeQuoteData
                                                            ? isCompleted ? 'text-green-600' : 'text-blue-600'
                                                            : 'text-gray-400'
                                                            }`}>
                                                            {activeQuoteData ? (isCompleted ? '‚úèÔ∏è' : '‚ûï') : '‚è∏Ô∏è'}
                                                        </span>
                                                    </div>
                                                </div>
                                            </div>

                                            <div className={`absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r ${service.color} transform scale-x-0 group-hover:scale-x-100 transition-transform duration-300 origin-left`}></div>
                                        </div>
                                    </ServiceCard>
                                );
                            })}
                        </div>
                    </SectionBox>

                    {/* Í∏∞Ï°¥ ÏòàÏïΩ Î∞©Ïãù ÎßÅÌÅ¨ */}
                    {canCreateNewBooking && (
                        <>
                            <div className="sticky top-0 z-20 bg-white border-b border-gray-200 py-4 mb-6">
                                <div className="flex gap-4 text-sm">
                                    <Link href="/mypage/quotes/new" className="text-blue-600 hover:text-blue-800 transition-colors">
                                        üìù Í≤¨Ï†Å Ïã†Ï≤≠ÌïòÍ∏∞
                                    </Link>
                                    <Link href="/mypage/quotes" className="text-blue-600 hover:text-blue-800 transition-colors">
                                        üìã Í≤¨Ï†Å Î™©Î°ù Î≥¥Í∏∞
                                    </Link>
                                    <Link href="/mypage/reservations" className="text-blue-600 hover:text-blue-800 transition-colors">
                                        üìÖ ÏòàÏïΩ Í¥ÄÎ¶¨ÌïòÍ∏∞
                                    </Link>
                                </div>
                            </div>
                        </>
                    )}
                </>
            )}
        </PageWrapper>
    );
}

export default function DirectBookingPage() {
    return (
        <Suspense fallback={<div className="flex justify-center items-center h-64">Î°úÎî© Ï§ë...</div>}>
            <DirectBookingContent />
        </Suspense>
    );
}
