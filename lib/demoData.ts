// üî• Í∞ïÎ†•Ìïú Îç∞Î™® Îç∞Ïù¥ÌÑ∞ ÏãúÏä§ÌÖú
// Ïù¥ ÌååÏùºÏùÄ Supabase Ïó∞Í≤∞ Ïó¨Î∂ÄÏôÄ Í¥ÄÍ≥ÑÏóÜÏù¥ Ìï≠ÏÉÅ Îç∞Ïù¥ÌÑ∞Î•º Î≥¥Ïû•Ìï©ÎãàÎã§.

export const demoQuotes = [
  {
    id: 'demo-1',
    title: 'ÌïòÎ°±Î≤†Ïù¥ ÌÅ¨Î£®Ï¶à 3Î∞ï4Ïùº Í∞ÄÏ°±Ïó¨Ìñâ',
    description: 'Î∂ÄÎ™®Îãò 2Î™Ö + ÏûêÎÖÄ 2Î™Ö Í∞ÄÏ°± Ïó¨ÌñâÏùÑ ÏúÑÌïú ÌïòÎ°±Î≤†Ïù¥ ÌÅ¨Î£®Ï¶à Í≤¨Ï†Å ÏöîÏ≤≠. VIPÎ£∏ Ìù¨Îßù, ÏãùÏÇ¨ Ìè¨Ìï®.',
    status: 'pending',
    total_price: 1850000,
    created_at: '2025-07-25T10:00:00Z',
    updated_at: '2025-07-25T10:00:00Z',
    user_id: 'demo-user-1',
    users: { name: 'ÍπÄÍ∞ÄÏ°±', email: 'family.kim@example.com' }
  },
  {
    id: 'demo-2', 
    title: 'ÏΩîÌÉÄÌÇ§ÎÇòÎ∞úÎ£® Ìú¥Ïñë 5Î∞ï6Ïùº Ïã†ÌòºÏó¨Ìñâ',
    description: 'Ïã†ÌòºÏó¨ÌñâÏùÑ ÏúÑÌïú ÏΩîÌÉÄÌÇ§ÎÇòÎ∞úÎ£® Î¶¨Ï°∞Ìä∏ Ìå®ÌÇ§ÏßÄ. ÌóàÎãàÎ¨∏ Ïä§ÏúÑÌä∏Î£∏, Ïª§Ìîå Ïä§Ìåå Ìè¨Ìï®.',
    status: 'approved',
    total_price: 3200000,
    created_at: '2025-07-24T14:30:00Z',
    updated_at: '2025-07-24T16:45:00Z',
    user_id: 'demo-user-2',
    users: { name: 'Ïù¥Ïã†Ìòº', email: 'honeymoon.lee@example.com' }
  },
  {
    id: 'demo-3',
    title: 'Ï†úÏ£ºÎèÑ ÌÅ¨Î£®Ï¶à 2Î∞ï3Ïùº Ïª§ÌîåÏó¨Ìñâ',
    description: 'Ïó∞Ïù∏Í≥º Ìï®ÍªòÌïòÎäî Ï†úÏ£ºÎèÑ ÌÅ¨Î£®Ï¶à Ïó¨Ìñâ. Î∞úÏΩîÎãà Í∞ùÏã§, Ï†ÄÎÖÅ ÎßåÏ∞¨ ÏΩîÏä§ Ìè¨Ìï®.',
    status: 'confirmed',
    total_price: 1280000,
    created_at: '2025-07-23T16:20:00Z',
    updated_at: '2025-07-23T18:30:00Z',
    user_id: 'demo-user-3',
    users: { name: 'Î∞ïÏª§Ìîå', email: 'couple.park@example.com' }
  },
  {
    id: 'demo-4',
    title: 'ÏÑ∏Î∂Ä ÏïÑÏùºÎûúÎìú Ìò∏Ìïë 4Î∞ï5Ïùº',
    description: 'ÏπúÍµ¨Îì§Í≥º Ìï®ÍªòÌïòÎäî ÏÑ∏Î∂Ä ÏïÑÏùºÎûúÎìú Ìò∏Ìïë Ìà¨Ïñ¥. Îã§Ïù¥Îπô Ï≤¥Ìóò, ÎπÑÏπò Î¶¨Ï°∞Ìä∏ Ìè¨Ìï®.',
    status: 'pending',
    total_price: 1450000,
    created_at: '2025-07-22T11:20:00Z',
    updated_at: '2025-07-22T11:20:00Z',
    user_id: 'demo-user-4',
    users: { name: 'Ï†ïÏπúÍµ¨', email: 'friends.jung@example.com' }
  },
  {
    id: 'demo-5',
    title: 'Î∂ÄÏÇ∞ ÌÅ¨Î£®Ï¶à ÎãπÏùºÏó¨Ìñâ',
    description: 'Î∂ÄÏÇ∞ Ï∂úÎ∞ú ÏùºÏùº ÌÅ¨Î£®Ï¶à Ìà¨Ïñ¥. Ï†êÏã¨ Î∑îÌéò, ÏÑ†ÏÉÅ ÏóîÌÑ∞ÌÖåÏù∏Î®ºÌä∏ Ìè¨Ìï®.',
    status: 'rejected',
    total_price: 450000,
    created_at: '2025-07-21T09:15:00Z',
    updated_at: '2025-07-21T15:30:00Z',
    user_id: 'demo-user-5',
    users: { name: 'ÏµúÎãπÏùº', email: 'oneday.choi@example.com' }
  }
];

export const demoUsers = [
  { id: 'demo-user-1', name: 'ÍπÄÍ∞ÄÏ°±', email: 'family.kim@example.com', role: 'member', created_at: '2025-07-25T09:00:00Z' },
  { id: 'demo-user-2', name: 'Ïù¥Ïã†Ìòº', email: 'honeymoon.lee@example.com', role: 'member', created_at: '2025-07-24T09:00:00Z' },
  { id: 'demo-user-3', name: 'Î∞ïÏª§Ìîå', email: 'couple.park@example.com', role: 'guest', created_at: '2025-07-23T09:00:00Z' },
  { id: 'demo-user-4', name: 'Ï†ïÏπúÍµ¨', email: 'friends.jung@example.com', role: 'member', created_at: '2025-07-22T09:00:00Z' },
  { id: 'demo-user-5', name: 'ÏµúÎãπÏùº', email: 'oneday.choi@example.com', role: 'guest', created_at: '2025-07-21T09:00:00Z' }
];

export const demoReservations = [
  { id: 'demo-res-1', quote_id: 'demo-2', status: 'confirmed', created_at: '2025-07-24T17:00:00Z' },
  { id: 'demo-res-2', quote_id: 'demo-3', status: 'completed', created_at: '2025-07-23T19:00:00Z' }
];

// ÌÜµÍ≥Ñ Í≥ÑÏÇ∞ Ìï®Ïàò
export const calculateDemoStats = () => {
  const quotes = demoQuotes;
  const users = demoUsers;
  const reservations = demoReservations;

  const quoteStats = {
    total: quotes.length,
    pending: quotes.filter(q => q.status === 'pending').length,
    approved: quotes.filter(q => q.status === 'approved').length,
    rejected: quotes.filter(q => q.status === 'rejected').length,
    confirmed: quotes.filter(q => q.status === 'confirmed').length
  };

  const now = new Date();
  const thisMonth = now.getMonth();
  const thisYear = now.getFullYear();
  const lastMonth = thisMonth === 0 ? 11 : thisMonth - 1;
  const lastMonthYear = thisMonth === 0 ? thisYear - 1 : thisYear;

  const revenue = {
    total: quotes
      .filter(q => q.status === 'approved' || q.status === 'confirmed')
      .reduce((sum, q) => sum + q.total_price, 0),
    thisMonth: quotes
      .filter(q => {
        const date = new Date(q.created_at);
        return date.getMonth() === thisMonth && 
               date.getFullYear() === thisYear && 
               (q.status === 'approved' || q.status === 'confirmed');
      })
      .reduce((sum, q) => sum + q.total_price, 0),
    lastMonth: quotes
      .filter(q => {
        const date = new Date(q.created_at);
        return date.getMonth() === lastMonth && 
               date.getFullYear() === lastMonthYear && 
               (q.status === 'approved' || q.status === 'confirmed');
      })
      .reduce((sum, q) => sum + q.total_price, 0)
  };

  const customerStats = {
    total: users.length,
    active: users.filter(u => u.role === 'member').length,
    new: users.filter(u => {
      const date = new Date(u.created_at);
      return date.getMonth() === thisMonth && date.getFullYear() === thisYear;
    }).length
  };

  const reservationStats = {
    total: reservations.length,
    confirmed: reservations.filter(r => r.status === 'confirmed').length,
    pending: quotes.filter(q => q.status === 'approved').length,
    completed: reservations.filter(r => r.status === 'completed').length
  };

  return {
    quotes: quoteStats,
    revenue,
    customers: customerStats,
    reservations: reservationStats,
    recentActivity: quotes.slice(0, 5).map(q => ({
      type: 'Í≤¨Ï†Å',
      description: `Í≤¨Ï†Å ${q.status} Ï≤òÎ¶¨ - ${q.total_price.toLocaleString()}Îèô`,
      time: q.created_at,
      status: q.status
    }))
  };
};

